header {
    package ca.hapke.campingbot.xml;
    
    import ca.hapke.campingbot.*;
    import ca.hapke.campingbot.users.*;
    import ca.hapke.campingbot.channels.*;
    import ca.hapke.campingbot.commands.*;
    import ca.hapke.campingbot.commands.spell.*;
    import ca.hapke.campingbot.response.*;
    import ca.hapke.campingbot.voting.*;
    import java.util.*;
}

class ContentParser extends Parser;

document[ SpellCommand sg, HypeCommand hype, PartyEverydayCommand pc, CampingChatManager cm, CampingUserMonitor um, InsultGenerator ig, EnhanceCommand ec]
    :   <camping>[ sg, hype, pc, cm, um, ig, ec] EOF
    ;
    
<camping> [SpellCommand sg, HypeCommand hype,  PartyEverydayCommand pc, CampingChatManager cm, CampingUserMonitor um, InsultGenerator ig, EnhanceCommand ec]
	:
	(<spell>[sg] )?
	(<countdown>[hype])?
	(<party>[pc]) ?
	(<insults>[ig]) ?
	(<enhance>[ec]) ?
	(<chats>[cm]) ?
	(<users>[um])?
	;
<party>[PartyEverydayCommand pc]
	:
	<excessives>[pc]
	;
	
<enhance>[EnhanceCommand ec]
	:
	<rickrolls>[ec]
	<overs>[ec]
	;
<rickrolls>[EnhanceCommand ec]
	{ String val; }
	:	
		(
			val=<item>
			{ec.addItem("rickroll", val);}
		) *
	;
<overs>[EnhanceCommand ec]
	{ String val; }
	:	
		(
			val=<item>
			{ec.addItem("over", val);}
		) *
	;
	
<excessives>[PartyEverydayCommand pc]
	{ String val; }
	:	
		(
			val=<item>
			{pc.addItem("excessive", val);}
		) *
	;
<insults>[InsultGenerator ig]
	{ String val; }
	:	
		(
			val=<item>
			{ig.addItem("insult", val);}
		) *
	;

<countdown>[HypeCommand hype]
	{ List<String> h, d; }
	:
	h=<hypes>
	d=<dicks>
	{
		hype.setHypesAndDicks(h, d);
	}
	;
<spell> [SpellCommand sg]
	{
		List<String> a;
	}
	: 
	a=<adjectives>
	{
		sg.setAdjectives(a);
	}
	(<pack>[sg]) *
	;
<pack> [SpellCommand sg]	
	{ 
		String name;
		List<String> aliases = null,i,e; }
	:
	name=<name>
	(aliases=<aliases>) ?
	i=<items>
	e=<exclamations>
	{
		sg.setValues(name, aliases, i, e);
	}
	;
<aliases> returns [List<String> vals = null]
	{ vals = new ArrayList<String>(); String val; }
	:	
		(
			val=<item>
			{vals.add(val);}
		) *
	;
<adjectives> returns [List<String> vals = null]
	{ vals = new ArrayList<String>(); String val; }
	:	
		(
			val=<item>
			{vals.add(val);}
		) *
	;
<hypes> returns [List<String> vals = null]
	{ vals = new ArrayList<String>(); String val; }
	:	
		(
			val=<item>
			{vals.add(val);}
		) *
	;
<dicks> returns [List<String> vals = null]
	{ vals = new ArrayList<String>(); String val; }
	:	
		(
			val=<item>
			{vals.add(val);}
		) *
	;
<items> returns [List<String> vals = null]
	{  vals = new ArrayList<String>(); String val; }
	:	
		(
			val=<item>
			{vals.add(val);}
		) *
	;
<exclamations> returns [List<String> vals = null]
	{  vals = new ArrayList<String>(); String val; }
	:	
		(
			val=<item>
			{vals.add(val);}
		) *
	;
<chats> [CampingChatManager cm]
	:  
		(<chat>[cm] ) *
	;
	
<chat> [CampingChatManager cm]
	{
		CampingChat chat;
		long chatId = 0;
		String idStr, name, type, allowed;
	}
	:
		idStr=<id>
		type=<type>
		name=<name>
		allowed=<allowed>
	{
		if (idStr != null && !"null".equalsIgnoreCase(idStr)) {
			chatId = Long.parseLong(idStr);
		} 
		if (chatId == 0)
			return;
		chat = cm.get(chatId);
		chat.setChatname(name);
		chat.setType(type);
		chat.setAllowed(allowed);
	}
	(<actives>[chat]) ?
	(<announce>[chat]) ?
	;

<actives> [CampingChat chat]
	{  
		long id; 
		String value;
	}
    :  
    (
	    value=<item>
	    { 
			if (value != null && !"null".equalsIgnoreCase(value)) {
				try {
					id = Long.parseLong(value);
					chat.addActiveUser(id);
				} catch (NumberFormatException e) {
				}
			}	 
	    }
    )*
	;
<users> [CampingUserMonitor um]
	{String nextId = null; }
	: 
	( nextId=<nextCampingId> ) ?
	(<user>[um]) *
	{
		if (nextId != null && um != null && !"null".equalsIgnoreCase(nextId)) {
			int nextIdInt = Integer.parseInt(nextId);
			um.setNextCampingId(nextIdInt);
		} 
	}
	;

<user> [CampingUserMonitor um]
{	String campingId = "null", id, username, first, last, initials = null, nickname, birthdayMonth = null, birthdayDay = null, lastUpdate, interaction = null;
	CampingUser user;
}
	:	( campingId=<campingId> ) ?
		id=<id>
		username=<username>
		first=<first>
		last=<last>
		( initials=<initials> ) ?
		nickname=<nickname>
		( interaction=<interaction> ) ?
		(   birthdayMonth=<birthdayMonth>
			birthdayDay=<birthdayDay>
		) ?
	{
		if (um == null)
			return;
			
		int campingIdInt = CampingUserMonitor.UNKNOWN_USER_ID;
		if (!"null".equalsIgnoreCase(campingId)) {
			campingIdInt = Integer.parseInt(campingId);
		} 
		
		long idInt = CampingUserMonitor.UNKNOWN_USER_ID;
		if (!"null".equalsIgnoreCase(id)) {
			idInt = Long.parseLong(id);
		} 
		if ("null".equalsIgnoreCase(username))
			username = null;
		boolean inter = false;
		if (interaction != null) {
			try {
				inter = Boolean.parseBoolean(interaction);
			} catch (Exception e) {
			}
		}
			
		user = um.monitor(campingIdInt, idInt, username, first, last, initials, inter);
		user.setNickname(nickname);
		
		int bM = -1, bD=-1;
		if (birthdayMonth != null)
			bM = Integer.parseInt(birthdayMonth);
		if (birthdayDay != null)
			bD = Integer.parseInt(birthdayDay);
		if (bM > 0 && bD > 0) {
			user.setBirthday(bM, bD);
		}
	}
	;
<announce>[CampingChat chat]
	:	pcdata:PCDATA 
	{
		try {
			String value = pcdata.getText();
			boolean tf = Boolean.parseBoolean(value);
			chat.setAnnounce(tf);
		} catch (Exception e) {
		}
	}
	;
<birthdayMonth> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<birthdayDay> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<nextCampingId> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<item> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<campingId> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<id> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<username> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<nickname> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<first> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<last> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<initials> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<name> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<interaction> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<type> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<allowed> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
    
<token> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<botUsername> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<adminUser> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;
<connectOnStartup> returns [String value = null]
    :   pcdata:PCDATA { value = pcdata.getText(); }
    ;